import random
import string

from flask import Flask, request, render_template, redirect, url_for, flash
from db_setup import *
from catalog import app

from flask import session as login_session

from oauth2client.client import flow_from_clientsecrets
from oauth2client.client import FlowExchangeError
import httplib2
import json
from flask import make_response
import requests
import os


#Fake Restaurants
category = {'name': 'The CRUDdy Crab', 'id': '1'}

categories = [{'name': 'The CRUDdy Crab', 'id': '1'}, {'name':'Blue Burgers', 'id':'2'},{'name':'Taco Hut', 'id':'3'}]

#Fake Menu Items
items = [ {'name':'Cheese Pizza', 'description':'made with fresh cheese', 'price':'$5.99','course' :'Entree', 'id':'1', 'cat_id': '1'}, {'name':'Chocolate Cake','description':'made with Dutch Chocolate', 'price':'$3.99', 'course':'Dessert','id':'2', 'cat_id': '2'},{'name':'Caesar Salad', 'description':'with fresh organic vegetables','price':'$5.99', 'course':'Entree','id':'3'},{'name':'Iced Tea', 'description':'with lemon','price':'$.99', 'course':'Beverage','id':'4'},{'name':'Spinach Dip', 'description':'creamy dip with fresh spinach','price':'$1.99', 'course':'Appetizer','id':'5', 'cat_id': '3'} ]
item =  {'name':'Cheese Pizza','description':'made with fresh cheese','price':'$5.99','course' :'Entree'}

CLIENT_ID = json.loads(
    open('client_secret.json', 'r').read())['web']['client_id']
APPLICATION_NAME = "Item Catalog"


@app.route('/')
@app.route('/<int:cat_id>')
def index(cat_id=None):
    """This is the root of the application"""
    main_categories = session.query(Category)
    if main_categories:
        if cat_id:
            # Fetch the content according to the id
            sub_items = session.query(Item).filter_by(cat_id=cat_id)
            category = session.query(Category).filter_by(id=cat_id).first()
            return render_template("index.html", categories=main_categories, items=sub_items,
                                   selected_category=category)
        else:
            return redirect('/1')
    else:
        return render_template("index.html")


@app.route('/login')
def showLogin():
    state = ''.join(random.choice(string.ascii_uppercase + string.digits) for x in xrange(32))
    login_session['state'] = state
    return render_template('login.html', STATE=state)


@app.route('/gconnect', methods=['POST'])
def gconnect():

    # Checking whether response received from the form the client requested
    if request.args.get('state') != login_session['state']:
        return prepare_invalid_login_status('Login state for the current session is invalid')

    # Receiving the auth code sent by google servers
    code = request.data
    try:
        # Create credentials object via the flow object which is generated by the client_secret.json.
        # client_secret.json is the file that is downloaded from the google dev console
        # All information needs to be correct in the server and client files
        # including the redirect_url in order for this try block to work
        credentials = get_credentials_object(code)
    except FlowExchangeError:
        return prepare_invalid_login_status('Failed to create credentials object')

    # Check that the access token is valid.
    access_token = credentials.access_token
    result = verify_access_token(access_token)

    # There is a problem in the access token
    if result.get('error') is not None:
        return prepare_invalid_login_status('Invalid Access Token. Error: '+result.get('error'))

    # check  the token is for correct user
    gplus_id = credentials.id_token['sub']
    if result['user_id'] != gplus_id:
        return prepare_invalid_login_status("User ID in credentials object is not equivalent to google server User ID")

    # Making sure the correct application
    if result['issued_to'] != CLIENT_ID:
        return prepare_invalid_login_status("Invalid client Id")

    stored_access_token = login_session.get('access_token')
    stored_gplus_id = login_session.get('gplus_id')

    # Checking whether  saved token is same as that is obtained from credentials object
    if stored_access_token is not None and stored_access_token == credentials.access_token and gplus_id == stored_gplus_id:
        return prepare_successful_status('User is already connected ')

    # Saving access_token and gplus_id
    login_session['access_token'] = credentials.access_token
    login_session['gplus_id'] = gplus_id
    print login_session['access_token']
    # Get user info
    userinfo_url = "https://www.googleapis.com/oauth2/v1/userinfo"
    params = {'access_token': credentials.access_token, 'alt': 'json'}
    answer = requests.get(userinfo_url, params=params)

    data = answer.json()

    login_session['username'] = data['name']
    login_session['picture'] = data['picture']
    login_session['user_id'] = data['id']
    #login_session['email'] = data['email']

    output = ''
    output += '<h1>Welcome, '
    output += login_session['username']
    output += '!</h1>'
    output += '<img src="'
    output += login_session['picture']
    output += ' " style = "width: 300px; height: 300px;border-radius: 150px;-webkit-border-radius: 150px;-moz-border-radius: 150px;"> '
    flash("you are now logged in as %s" % login_session['username'])
    print "done!"
    return output


def prepare_invalid_login_status(message):
    response = make_response(json.dumps(message), 401)
    response.headers['Content-Type'] = 'application/json'
    return response


def prepare_successful_status(message):
    response = make_response(json.dumps(message), 200)
    response.headers['Content-Type'] = 'application/json'
    return response


def get_credentials_object(code):
    oauth_flow = flow_from_clientsecrets('client_secret.json', scope='https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile')
    oauth_flow.redirect_uri = "postmessage"
    credentials = oauth_flow.step2_exchange(code)
    return credentials


def verify_access_token(access_token):
    url = ('https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s'
           % access_token)
    h = httplib2.Http()
    return json.loads(h.request(url, 'GET')[1])


def revoke_access_token(access_token):
    print access_token
    url = ("https://accounts.google.com/o/oauth2/revoke?token='%s'" % access_token)
    h = httplib2.Http()
    response = h.request(url, 'GET')[1]
    return response


@app.route('/gdisconnect')
def gdisconnect():
    access_token = login_session.get('access_token')
    print access_token
    if access_token is None:
        return prepare_invalid_login_status('User credentials saved in session is empty')
    results = revoke_access_token(access_token)

# Clear all login_session variables if revocation is successful on google servers
    if results['status'] == '200':
        del login_session['credentials']
        del login_session['username']
        del login_session['picture']
        del login_session['gplus_id']
        del login_session['access_token']
        del login_session['state']
    else:
        return prepare_invalid_login_status('Revocation of access token on server failed.')

    return prepare_successful_status('Successfully logged out')


# Routing end points for items
@app.route('/add/item/<int:cat_id>', methods=['GET', 'POST'])
def add_item(cat_id=None):
    """This will render add html form and save the filled form"""

    if 'username' not in login_session:
        return redirect('/login')

    if cat_id:
        category = session.query(Category).filter_by(id=cat_id).first()
        if request.method == "GET":
            category = session.query(Category).filter_by(id=cat_id).first()
            return render_template("add_item.html", category=category)
        else:
            name = request.form["name"]
            description = request.form["description"]
            new_item = Item(name=name, description=description, cat_id=cat_id)
            session.add(new_item)
            session.commit()
            return redirect('/')
    else:
        return redirect('/')

@app.route('/edit/item/<int:cat_id>/<int:item_id>', methods=['GET','POST'])
def edit_item(cat_id, item_id):
    """This will edit an existing item. category id is not needed,
       but it is taken in order to keep consistency in the URL
    """
    if cat_id and item_id:
        if request.method == 'GET':
            item = session.query(Item).filter_by(id=item_id).first()
            return render_template("edit_item.html", category=item.category, item=item)
        else:
            item = session.query(Item).filter_by(id=item_id).first()
            name = request.form["name"]
            description = request.form["description"]
            item.name = name
            item.description = description
            session.add(item)
            session.commit()
            return redirect("/")
    else:
        return redirect("/")

@app.route('/delete/<int:item_id>',methods=['GET','POST'])
def delete_item(item_id):
    """This route will delete an item"""
    if 'username' not in login_session:
        return redirect('/login')

    if item_id:
        item = session.query(Item).filter_by(id=item_id).first()
        if request.method == 'GET':
            return render_template("delete_item.html", item=item)
        else:
            session.delete(item)
            session.commit()
    return redirect("/")

@app.route('/description/<int:cat_id>/<int:item_id>')
def description_item(cat_id, item_id):
    """This will render the descrition view"""
    return render_template("description.html", category=category, item=item)

# Routing end points for categories
@app.route('/add/category/', methods=['GET','POST'])
def add_category():
    """This will render add html form"""

    if 'username' not in login_session:
        return redirect('/login')

    if request.method == 'GET':
        return render_template("add_category.html")
    else:
        name = request.form["name"]
        newItem = Category(name=name)
        session.add(newItem)
        session.commit()
        return redirect(url_for("index"))

@app.route('/edit/category/<int:cat_id>',methods=['GET','POST'])
def edit_category(cat_id):
    """This will edit an existing category"""

    if 'username' not in login_session:
        return redirect('/login')

    if cat_id:
        category = session.query(Category).filter_by(id=cat_id).first()
        if request.method == 'GET':
            return render_template("edit_category.html", category=category)
        else:
            name = request.form["name"]
            category.name = name
            session.add(category)
            session.commit()
            return redirect("/")
    else:
        return redirect("/")

@app.route('/delete/<int:cat_id>')
def delete_category(cat_id):
    """Deleting category"""

    if 'username' not in login_session:
        return redirect('/login')

    if cat_id:
        category = session.query(Category).filter_by(id=cat_id).first()
        if request.method == 'GET':
            return render_template("delete_category.html", category=category)
        else:
            session.delete(category)
            session.commit()
    return redirect("/")
